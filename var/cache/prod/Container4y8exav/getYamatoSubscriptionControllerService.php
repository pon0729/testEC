<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'Plugin\YamatoSubscription\Controller\Admin\YamatoSubscriptionController' shared autowired service.

include_once $this->targetDirs[3].'/vendor/symfony/dependency-injection/ContainerAwareTrait.php';
include_once $this->targetDirs[3].'/vendor/symfony/framework-bundle/Controller/Controller.php';
include_once $this->targetDirs[3].'/src/Eccube/Controller/AbstractController.php';
include_once $this->targetDirs[3].'/app/Plugin/YamatoSubscription/Controller/Admin/YamatoSubscriptionController.php';
include_once $this->targetDirs[3].'/app/Plugin/YamatoSubscription/Service/SubscriptionMailService.php';

$a = ${($_ = isset($this->services['Eccube\\Common\\EccubeConfig']) ? $this->services['Eccube\\Common\\EccubeConfig'] : ($this->services['Eccube\\Common\\EccubeConfig'] = new \Eccube\Common\EccubeConfig($this))) && false ?: '_'};
$b = ${($_ = isset($this->services['event_dispatcher']) ? $this->services['event_dispatcher'] : $this->getEventDispatcherService()) && false ?: '_'};
$c = ${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->load('getForm_FactoryService.php')) && false ?: '_'};

$this->services['Plugin\\YamatoSubscription\\Controller\\Admin\\YamatoSubscriptionController'] = $instance = new \Plugin\YamatoSubscription\Controller\Admin\YamatoSubscriptionController(${($_ = isset($this->services['eccube.purchase.flow.order']) ? $this->services['eccube.purchase.flow.order'] : $this->load('getEccube_Purchase_Flow_OrderService.php')) && false ?: '_'}, new \Plugin\YamatoSubscription\Service\SubscriptionMailService($a, ${($_ = isset($this->services['swiftmailer.mailer.default']) ? $this->services['swiftmailer.mailer.default'] : $this->load('getSwiftmailer_Mailer_DefaultService.php')) && false ?: '_'}, ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->getTwigService()) && false ?: '_'}, $b, ${($_ = isset($this->services['Eccube\\Repository\\BaseInfoRepository']) ? $this->services['Eccube\\Repository\\BaseInfoRepository'] : $this->getBaseInfoRepositoryService()) && false ?: '_'}, ${($_ = isset($this->services['Eccube\\Repository\\MailHistoryRepository']) ? $this->services['Eccube\\Repository\\MailHistoryRepository'] : $this->load('getMailHistoryRepositoryService.php')) && false ?: '_'}, ${($_ = isset($this->services['Eccube\\Repository\\MailTemplateRepository']) ? $this->services['Eccube\\Repository\\MailTemplateRepository'] : $this->load('getMailTemplateRepositoryService.php')) && false ?: '_'}), ${($_ = isset($this->services['Plugin\\YamatoPayment4\\Service\\Client\\CreditClientService']) ? $this->services['Plugin\\YamatoPayment4\\Service\\Client\\CreditClientService'] : $this->load('getCreditClientServiceService.php')) && false ?: '_'}, ${($_ = isset($this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsRepository']) ? $this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsRepository'] : $this->getYamatoSubsRepositoryService()) && false ?: '_'}, ${($_ = isset($this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsHistoryRepository']) ? $this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsHistoryRepository'] : $this->getYamatoSubsHistoryRepositoryService()) && false ?: '_'}, ${($_ = isset($this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsConfigRepository']) ? $this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsConfigRepository'] : $this->getYamatoSubsConfigRepositoryService()) && false ?: '_'}, ${($_ = isset($this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsUsersOrderRepository']) ? $this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsUsersOrderRepository'] : $this->getYamatoSubsUsersOrderRepositoryService()) && false ?: '_'}, ${($_ = isset($this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsUsersOrderItemRepository']) ? $this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsUsersOrderItemRepository'] : $this->getYamatoSubsUsersOrderItemRepositoryService()) && false ?: '_'}, ${($_ = isset($this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsUsersShippingRepository']) ? $this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsUsersShippingRepository'] : $this->getYamatoSubsUsersShippingRepositoryService()) && false ?: '_'}, ${($_ = isset($this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsUsersReferralCodeOrderRepository']) ? $this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsUsersReferralCodeOrderRepository'] : $this->getYamatoSubsUsersReferralCodeOrderRepositoryService()) && false ?: '_'}, ${($_ = isset($this->services['Eccube\\Repository\\Master\\PageMaxRepository']) ? $this->services['Eccube\\Repository\\Master\\PageMaxRepository'] : $this->load('getPageMaxRepositoryService.php')) && false ?: '_'}, ${($_ = isset($this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsDiscountCategoryRepository']) ? $this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsDiscountCategoryRepository'] : $this->load('getYamatoSubsDiscountCategoryRepositoryService.php')) && false ?: '_'}, ${($_ = isset($this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsDiscountProductRepository']) ? $this->services['Plugin\\YamatoSubscription\\Repository\\YamatoSubsDiscountProductRepository'] : $this->load('getYamatoSubsDiscountProductRepositoryService.php')) && false ?: '_'}, $c);

$instance->setEccubeConfig($a);
$instance->setEntityManager(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->getDoctrine_Orm_DefaultEntityManagerService()) && false ?: '_'});
$instance->setTranslator(${($_ = isset($this->services['translator.default']) ? $this->services['translator.default'] : $this->getTranslator_DefaultService()) && false ?: '_'});
$instance->setSession(${($_ = isset($this->services['session']) ? $this->services['session'] : $this->getSessionService()) && false ?: '_'});
$instance->setFormFactory($c);
$instance->setEventDispatcher($b);

return $instance;
