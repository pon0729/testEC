<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'Plugin\ContactManagement4\Controller\Admin\ContactReplyEditController' shared autowired service.

include_once $this->targetDirs[3].'/vendor/symfony/dependency-injection/ContainerAwareTrait.php';
include_once $this->targetDirs[3].'/vendor/symfony/framework-bundle/Controller/Controller.php';
include_once $this->targetDirs[3].'/src/Eccube/Controller/AbstractController.php';
include_once $this->targetDirs[3].'/app/Plugin/ContactManagement4/Controller/Admin/ContactReplyEditController.php';
include_once $this->targetDirs[3].'/app/Plugin/ContactManagement4/Service/MailService.php';

$a = ${($_ = isset($this->services['Eccube\\Common\\EccubeConfig']) ? $this->services['Eccube\\Common\\EccubeConfig'] : ($this->services['Eccube\\Common\\EccubeConfig'] = new \Eccube\Common\EccubeConfig($this))) && false ?: '_'};
$b = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->getDoctrine_Orm_DefaultEntityManagerService()) && false ?: '_'};

$this->services['Plugin\\ContactManagement4\\Controller\\Admin\\ContactReplyEditController'] = $instance = new \Plugin\ContactManagement4\Controller\Admin\ContactReplyEditController(${($_ = isset($this->services['Plugin\\ContactManagement4\\Repository\\ContactRepository']) ? $this->services['Plugin\\ContactManagement4\\Repository\\ContactRepository'] : $this->load('getContactRepositoryService.php')) && false ?: '_'}, ${($_ = isset($this->services['Plugin\\ContactManagement4\\Repository\\ContactReplyRepository']) ? $this->services['Plugin\\ContactManagement4\\Repository\\ContactReplyRepository'] : $this->load('getContactReplyRepositoryService.php')) && false ?: '_'}, new \Plugin\ContactManagement4\Service\MailService(${($_ = isset($this->services['swiftmailer.mailer.default']) ? $this->services['swiftmailer.mailer.default'] : $this->load('getSwiftmailer_Mailer_DefaultService.php')) && false ?: '_'}, ${($_ = isset($this->services['Eccube\\Repository\\MailTemplateRepository']) ? $this->services['Eccube\\Repository\\MailTemplateRepository'] : $this->load('getMailTemplateRepositoryService.php')) && false ?: '_'}, ${($_ = isset($this->services['Eccube\\Repository\\MailHistoryRepository']) ? $this->services['Eccube\\Repository\\MailHistoryRepository'] : $this->load('getMailHistoryRepositoryService.php')) && false ?: '_'}, ${($_ = isset($this->services['Eccube\\Repository\\BaseInfoRepository']) ? $this->services['Eccube\\Repository\\BaseInfoRepository'] : $this->getBaseInfoRepositoryService()) && false ?: '_'}, ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->getTwigService()) && false ?: '_'}, $a, $b));

$instance->setEccubeConfig($a);
$instance->setEntityManager($b);
$instance->setTranslator(${($_ = isset($this->services['translator.default']) ? $this->services['translator.default'] : $this->getTranslator_DefaultService()) && false ?: '_'});
$instance->setSession(${($_ = isset($this->services['session']) ? $this->services['session'] : $this->getSessionService()) && false ?: '_'});
$instance->setFormFactory(${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->load('getForm_FactoryService.php')) && false ?: '_'});
$instance->setEventDispatcher(${($_ = isset($this->services['event_dispatcher']) ? $this->services['event_dispatcher'] : $this->getEventDispatcherService()) && false ?: '_'});

return $instance;
