<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'Trikoder\Bundle\OAuth2Bundle\Controller\AuthorizationController' shared service.

include_once $this->targetDirs[3].'/vendor/trikoder/oauth2-bundle/Controller/AuthorizationController.php';
include_once $this->targetDirs[3].'/vendor/trikoder/oauth2-bundle/Converter/UserConverterInterface.php';
include_once $this->targetDirs[3].'/vendor/trikoder/oauth2-bundle/Converter/UserConverter.php';

return $this->services['Trikoder\\Bundle\\OAuth2Bundle\\Controller\\AuthorizationController'] = new \Trikoder\Bundle\OAuth2Bundle\Controller\AuthorizationController(${($_ = isset($this->services['League\\OAuth2\\Server\\AuthorizationServer']) ? $this->services['League\\OAuth2\\Server\\AuthorizationServer'] : $this->load('getAuthorizationServerService.php')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->getDebug_EventDispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['Trikoder\\Bundle\\OAuth2Bundle\\Event\\AuthorizationRequestResolveEventFactory']) ? $this->services['Trikoder\\Bundle\\OAuth2Bundle\\Event\\AuthorizationRequestResolveEventFactory'] : $this->load('getAuthorizationRequestResolveEventFactoryService.php')) && false ?: '_'}, ${($_ = isset($this->services['Trikoder\\Bundle\\OAuth2Bundle\\Converter\\UserConverter']) ? $this->services['Trikoder\\Bundle\\OAuth2Bundle\\Converter\\UserConverter'] : ($this->services['Trikoder\\Bundle\\OAuth2Bundle\\Converter\\UserConverter'] = new \Trikoder\Bundle\OAuth2Bundle\Converter\UserConverter())) && false ?: '_'});
